/* Version 1.0.0 dom-node-selector-mapping-classifier (https://github.com/ecaroth/dom-node-selector-mapping-classifier), Authored by Evan Carothers (https://github.com/ecaroth) */

!function(module){"use strict";function _LOG(str,val){main.debug&&console.log("DOM-SEL>> "+str,val)}var cssesc=function(){var object={},hasOwnProperty=object.hasOwnProperty,merge=function(options,defaults){if(!options)return defaults;var key,result={};for(key in defaults)result[key]=hasOwnProperty.call(options,key)?options[key]:defaults[key];return result},regexAnySingleEscape=/[ -,\.\/;-@\[-\^`\{-~]/,regexSingleEscape=/[ !#-&\(-,\.\/;-@\[\]\^`\{-~]/,regexExcessiveSpaces=/(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g,cssesc=function(string,options){options=merge(options,cssesc.options),"single"!=options.quotes&&"double"!=options.quotes&&(options.quotes="single");for(var value,character,codePoint,extra,quote="double"==options.quotes?'"':"'",isIdentifier=options.isIdentifier,firstChar=string.charAt(0),output="",counter=0,length=string.length;length>counter;)character=string.charAt(counter++),codePoint=character.charCodeAt(),32>codePoint||codePoint>126?(codePoint>=55296&&56319>=codePoint&&length>counter&&(extra=string.charCodeAt(counter++),56320==(64512&extra)?codePoint=((1023&codePoint)<<10)+(1023&extra)+65536:counter--),value="\\"+codePoint.toString(16).toUpperCase()+" "):value=options.escapeEverything?regexAnySingleEscape.test(character)?"\\"+character:"\\"+codePoint.toString(16).toUpperCase()+" ":/[\t\n\f\r\x0B:]/.test(character)?isIdentifier||":"!=character?"\\"+codePoint.toString(16).toUpperCase()+" ":character:"\\"==character||!isIdentifier&&('"'==character&&quote==character||"'"==character&&quote==character)||isIdentifier&&regexSingleEscape.test(character)?"\\"+character:character,output+=value;return isIdentifier&&(/^_/.test(output)?output="\\_"+output.slice(1):/^-[-\d]/.test(output)?output="\\-"+output.slice(1):/\d/.test(firstChar)&&(output="\\3"+firstChar+" "+output.slice(1))),output=output.replace(regexExcessiveSpaces,function($0,$1,$2){return $1&&$1.length%2?$0:($1||"")+$2}),!isIdentifier&&options.wrap?quote+output+quote:output};return cssesc.options={escapeEverything:!1,isIdentifier:!1,quotes:"single",wrap:!1},cssesc.version="0.1.0",cssesc}(),tools={css_selector_escape:function(val,as_identifier){return cssesc(val,{isIdentifier:as_identifier,quotes:"double"})},build_selector_str:function(chain,loose_match){function _sel_from_stack(parts){return parts.slice().reverse().join(" ").replace(/\\/g,"\\")}function _test_for_child_collision(parts,c_data,node){var match_sel=_sel_from_stack(parts),el_matches=Array.from(node.parentNode.querySelectorAll(match_sel));if(1===el_matches.length)return!1;if(el_matches=Array.from(node.parentNode.querySelectorAll(_build_selector_from_chain([c_data],!1))),1===el_matches.length)return!1;var match_ind=!1;return el_matches.some(function(el,ind){return el===node?(match_ind=ind+1,!0):void 0}),match_ind}function _build_selector_from_chain(chain,check_for_child_collission){for(var parts=[],used_last=!1,last_was_nth_child=!1,i=0,len=chain.length;len>i;i++){var c=chain[i],sel="",this_used_nth_child=!1;if(sel+=c.node.tagName,c.matches.forEach(function(match){var comparator=loose_match?"*=":"class"===match[0]?"~=":"=";sel+="["+match[0]+comparator+'"'+tools.css_selector_escape(match[1],!1)+'"]'}),check_for_child_collission){var temp_sel=sel;used_last&&(temp_sel+=" >");var nth_child=_test_for_child_collision(parts.concat([temp_sel]),c,c.node);nth_child&&(sel+=":nth-of-type("+nth_child+")",this_used_nth_child=!0)}0!==c.matches.length||0===i||last_was_nth_child||this_used_nth_child?(last_was_nth_child=this_used_nth_child,used_last&&(sel+=" >"),used_last=!0,parts.push(sel)):used_last=!1}return _sel_from_stack(parts)}return _build_selector_from_chain(chain,!0)}},CONFIDENCE={low:1,med:2,high:3},NodeClassifier=function(matches,loose_match){function _input(node){_LOG("---Classifier iteration node",node);var attr_matches=[],confidence=0;for(var attr in ATTR_CONFIDENCE){var attr_val=node.getAttribute(attr);if(attr_val){var check_vals=[attr_val.trim()];"class"===attr&&(check_vals=check_vals[0].replace(/  +/g," ").split(/\s+/g)),_LOG("Classifier check vals",check_vals),check_vals.forEach(function(check){matches.forEach(function(match){var ind=check.toLowerCase().indexOf(match);if(-1!==ind){var css_attr_val=check;loose_match&&(css_attr_val=check.substr(ind,match.length)),attr_matches.push([attr,css_attr_val]),confidence=Math.max(confidence,ATTR_CONFIDENCE[attr])}})}),_LOG("Attribute selector matches",attr_matches);for(var i=attr_matches.length-1;i>=0;i--)ATTR_CONFIDENCE[attr_matches[i][0]]<confidence&&attr_matches.splice(i,1);_LOG("Attr selectors after stripping for confidence",attr_matches)}}return{node:node,confidence:confidence,matches:attr_matches}}"string"==typeof matches&&(matches=[matches]),matches=matches.map(function(v){return v.toLowerCase()});var ATTR_CONFIDENCE={id:CONFIDENCE.high,name:CONFIDENCE.high,"class":CONFIDENCE.med,title:CONFIDENCE.low,placeholder:CONFIDENCE.low,value:CONFIDENCE.med};return{input:_input}},main={debug:!1,mapNode:function(match_node,classifier_matches,loose_match){if(!match_node||!classifier_matches)return!1;_LOG("Mapping node:",node),_LOG("With classifiers:",classifier_matches);for(var classifier=NodeClassifier(classifier_matches,loose_match),node=match_node,selector_chain=[],confident=!1;!confident&&"BODY"!==node.tagName;){var c_data=classifier.input(node,loose_match);if(selector_chain.push(c_data),selector_chain[selector_chain.length-1].confidence===CONFIDENCE.high&&!loose_match)break;node=node.parentNode}_LOG("Final selector chain:",selector_chain);var selector_str=tools.build_selector_str(selector_chain,loose_match);return _LOG("Final selector string:",selector_str),selector_str}};module.DOMNodeSelectorMappingClassifier=main}("undefined"!=typeof exports?exports:window);